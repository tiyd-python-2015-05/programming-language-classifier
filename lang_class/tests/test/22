/**
 * Interface to represent a persistence store for archives
 *
 * @author James Kojo
 * @author Vasanth Asokan
 */
public interface ArchiveRepository {
    /**
     * Get the ID of this repository
     * @return the id string.
     */
    public String getRepositoryId();

    /**
     * Get the default view into this repository.
     * @return the default repository view.
     */
    public RepositoryView getDefaultView();

    /**
     * Get a specific named view into this repository.
     *
     * @param view the name of the view.
     * @return a {@link RepositoryView} that matches the given name or null if
     *         one wasn't found.
     * @throws UnsupportedOperationException
     *             if this repository does not support named views.
     */
    public RepositoryView getView(String view);

    /**
     * Insert a Jar into the repository
     * @param jarScriptArchive script archive which describes the jar and
     *        the ModuleSpec which should be inserted
     */
    public void insertArchive(JarScriptArchive jarScriptArchive)
        throws IOException;

    /**
     * Insert a Jar into the repository
     * @param jarScriptArchive script archive which describes the jar and
     *        the ModuleSpec which should be inserted
     * @param initialDeploySpecs a set of initial deployment specs.
     * @throws UnsupportedOperationException if this repository does not support
     *         adding deploy specs to a module.
     */
    public void insertArchive(JarScriptArchive jarScriptArchive, Map <String, Object> initialDeploySpecs)
        throws IOException;

    /**
     * Get all of the {@link ScriptArchive}s for the given set of moduleIds.
     *
     * @param moduleIds keys to search for
     * @return set of ScriptArchives retrieved from the database
     */
    public Set<ScriptArchive> getScriptArchives(Set<ModuleId> moduleIds) throws IOException;

    /**
     * Delete an archive by ID
     * @param moduleId module id to delete
     * @throws IOException
     */
    public void deleteArchive(ModuleId moduleId) throws IOException;
}